#![allow(missing_docs, trivial_casts, unused_variables, unused_mut, unused_imports, unused_extern_crates, non_camel_case_types)]
#![allow(unused_imports, unused_attributes)]
#![allow(clippy::derive_partial_eq_without_eq, clippy::disallowed_names)]

use async_trait::async_trait;
use axum::extract::*;
use axum_extra::extract::{CookieJar, Multipart};
use bytes::Bytes;
use http::Method;
use serde::{Deserialize, Serialize};

pub const BASE_PATH: &str = "{{{basePathWithoutHost}}}";
{{#appVersion}}
pub const API_VERSION: &str = "{{{.}}}";
{{/appVersion}}

{{#apiInfo}}
  {{#apis}}
    {{#operations}}
      {{#operation}}
        {{>response}}
      {{/operation}}
    {{/operations}}
  {{/apis}}
{{/apiInfo}}

/// API
#[async_trait]
#[allow(clippy::too_many_arguments, clippy::ptr_arg)]
pub trait Api {
{{#apiInfo}}
  {{#apis}}
    {{#operations}}
      {{#operation}}

            {{#summary}}
                /// {{{.}}}
            {{/summary}}
            {{#vendorExtensions}}
                /// Operation: {{{operationId}}} - {{{httpMethod}}} {{{path}}}
                async fn {{{x-operation-id}}}(
                &self,
                method: Method,
                host: Host,
                cookies: CookieJar,
                {{#headerParams}}
                    header_{{{paramName}}}:  {{^required}}Option<{{/required}}{{{dataType}}}{{^required}}>{{/required}},
                {{/headerParams}}
                {{#pathParams}}
                    path_{{{paramName}}}: {{^required}}Option<{{/required}}{{{dataType}}}{{^required}}>{{/required}},
                {{/pathParams}}
                {{#queryParams}}
                    query_{{{paramName}}}: {{^required}}Option<{{/required}}{{{dataType}}}{{^required}}>{{/required}},
                {{/queryParams}}
                {{^x-consumes-multipart}}
                    {{#bodyParams}}
                    {{#-first}}
                    {{#vendorExtensions}}
                    {{#x-consumes-json}}
                        body: {{^required}}Option<{{/required}}{{{dataType}}}{{^required}}>{{/required}},
                    {{/x-consumes-json}}
                    {{^x-consumes-json}}
                        body: Bytes,
                    {{/x-consumes-json}}
                    {{#x-consumes-plain-text}}
                      {{#isByteArray}}
                        body: Bytes,
                      {{/isByteArray}}
                      {{#isString}}
                        body: String,
                      {{/isString}}
                    {{/x-consumes-plain-text}}
                    {{/vendorExtensions}}
                    {{/-first}}
                    {{/bodyParams}}
                {{/x-consumes-multipart}}
                {{#x-consumes-multipart}}
                    body: Multipart,
                {{/x-consumes-multipart}}
                ) -> Result<{{{operationId}}}Response, String>;
            {{/vendorExtensions}}

      {{/operation}}
    {{/operations}}
  {{/apis}}
{{/apiInfo}}
}

#[cfg(feature = "server")]
pub mod server;

pub mod models;
pub mod types;

#[cfg(feature = "server")]
pub(crate) mod header;
